/* Basado en: ESP8266 AWS IoT example by Evandro Luis Copercini
   Public Domain - 2017
   It connects to AWS IoT server then:
  - publishes " to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
*/

#define MSG_BUFFER_SIZE 200
#define MQTT_MAX_PACKET_SIZE 256 // Si no funciona, modificar el PubSubClient.h

#include <ESP8266WiFi.h>
#include <PubSubClient.h> //Get it from here: https://github .com/knolleary/pubsubclient
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include <RtcDS3231.h>
#include "ArduinoJson.h"


// CONNECTIONS:
// DS3231 SDA --> SDA
// DS3231 SCL --> SCL
// DS3231 VCC --> 3.3v or 5v
// DS3231 GND --> GND
// For ESP8266, I2C default to SDA = GPIO04 (D2) and SCL = GPIO05 (D1); but check with your specific board.
// Light Sensor In Analogic --> D7

/* convert and replace with your keys
  $ openssl x509 -in aaaaaaaaa-certificate.pem.crt -out certificates/cert.der -outform DER
  $ openssl rsa -in aaaaaaaaaa-private.pem.key -out certificates/private.der -outform DER
  $ xxd -i certificates
*/
unsigned char arduinoesp_3048_key[] = {
  0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00,
  0xbc, 0x21, 0x29, 0xc4, 0x40, 0xbe, 0xd8, 0xf6, 0x3b, 0xfe, 0xbe, 0xdc,
  0xe9, 0x9e, 0x54, 0x76, 0xb8, 0x84, 0x53, 0xf4, 0xae, 0xb5, 0x32, 0x47,
  0x7e, 0xfa, 0x3a, 0x91, 0x55, 0x0e, 0x6b, 0xce, 0xcc, 0xa2, 0x46, 0x33,
  0x08, 0xd7, 0x4f, 0x30, 0xcf, 0xe5, 0xd3, 0x30, 0x0e, 0x61, 0x0a, 0x27,
  0x6a, 0x5a, 0x6c, 0xc7, 0x5c, 0xab, 0x72, 0x8d, 0x3e, 0xf5, 0x68, 0x9d,
  0x21, 0xca, 0x14, 0x37, 0xc0, 0x07, 0x0e, 0x66, 0x63, 0x7b, 0x38, 0x14,
  0x93, 0xcb, 0xd0, 0xb2, 0xff, 0x60, 0x5a, 0x79, 0x43, 0x0c, 0x0e, 0x1c,
  0xc3, 0xc0, 0x6c, 0xe8, 0xcf, 0xad, 0x72, 0x6e, 0xe1, 0x51, 0x0b, 0xb7,
  0x83, 0x6f, 0x8c, 0x95, 0x70, 0x5e, 0xa2, 0x65, 0x3a, 0x21, 0xe7, 0x62,
  0x13, 0x48, 0x4f, 0xeb, 0x50, 0xd7, 0xd8, 0x2a, 0x4e, 0xbe, 0x60, 0x9f,
  0xe7, 0xd1, 0x01, 0x65, 0x2e, 0xb9, 0xa4, 0xa9, 0x4a, 0x90, 0x27, 0x03,
  0x26, 0xb7, 0x37, 0x00, 0x36, 0x29, 0x2a, 0x21, 0x55, 0xfc, 0x75, 0x96,
  0xd8, 0xcf, 0xc3, 0xda, 0x44, 0xab, 0x17, 0xf3, 0xa8, 0x8f, 0xc5, 0xce,
  0x22, 0x3e, 0x57, 0x02, 0xd8, 0x4e, 0xcf, 0xeb, 0x6c, 0x7c, 0xb0, 0x7a,
  0xe9, 0xf9, 0xbd, 0x1f, 0xbc, 0x02, 0xf4, 0xcc, 0xf2, 0x6b, 0x1a, 0x25,
  0x84, 0x38, 0x4e, 0x06, 0x98, 0x6f, 0xdf, 0x5e, 0xee, 0x20, 0x92, 0x32,
  0x20, 0x3b, 0x14, 0x9e, 0xd0, 0x63, 0x65, 0x7b, 0x35, 0xb3, 0xd7, 0xda,
  0xdb, 0xe5, 0x54, 0x29, 0xea, 0x34, 0x95, 0x84, 0x14, 0x86, 0xa4, 0x10,
  0xe9, 0x76, 0xe1, 0xbf, 0xc1, 0xee, 0xea, 0x9f, 0x00, 0x3c, 0x96, 0xce,
  0xde, 0x72, 0x1a, 0x70, 0x4f, 0x26, 0x1e, 0xc3, 0x96, 0x75, 0x79, 0x87,
  0xd0, 0xaf, 0x65, 0x91, 0x85, 0x52, 0x88, 0xe9, 0x8e, 0xa0, 0x0e, 0x4a,
  0xc2, 0xf1, 0x2c, 0x57, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01,
  0x01, 0x00, 0x8b, 0x1c, 0x86, 0xb2, 0xed, 0x21, 0x72, 0x73, 0x99, 0xe7,
  0x84, 0xa0, 0xfc, 0x4b, 0x2c, 0xaf, 0xe1, 0x3f, 0x50, 0x89, 0x95, 0x0a,
  0xbd, 0x94, 0x2a, 0xab, 0xc3, 0xd5, 0x25, 0xad, 0x15, 0x41, 0x05, 0x06,
  0x55, 0x9c, 0x75, 0x44, 0x28, 0xf5, 0xb2, 0x35, 0x82, 0xd5, 0x7d, 0x3c,
  0x7a, 0x72, 0xac, 0xed, 0x12, 0x94, 0xd4, 0xcc, 0x9e, 0x57, 0x1d, 0xa0,
  0x00, 0x6c, 0x78, 0xc8, 0xe1, 0xec, 0x5b, 0x9d, 0x9c, 0x23, 0x50, 0x1a,
  0x94, 0x5c, 0x7a, 0xf1, 0x72, 0x70, 0x79, 0xf0, 0x78, 0xd6, 0x44, 0x22,
  0xcc, 0xe8, 0xae, 0x43, 0x43, 0x05, 0x60, 0x54, 0x24, 0x53, 0x23, 0x5f,
  0x77, 0xa7, 0x8a, 0x94, 0x58, 0xc3, 0x44, 0x25, 0x66, 0x36, 0x2e, 0x27,
  0x55, 0xde, 0xaa, 0xdd, 0x84, 0xe3, 0x3f, 0x93, 0x6b, 0xef, 0xd4, 0xec,
  0x67, 0xac, 0xb6, 0x91, 0x51, 0x53, 0xcd, 0x9a, 0x4e, 0xcb, 0xee, 0xe4,
  0x33, 0x46, 0xef, 0x3f, 0xe1, 0xea, 0x24, 0xf6, 0xb6, 0xbe, 0x28, 0xf1,
  0xcb, 0x81, 0x67, 0xe3, 0x7d, 0xc4, 0xa0, 0x09, 0xb5, 0x1d, 0x47, 0xfa,
  0x0d, 0x98, 0x8a, 0x32, 0xf8, 0x1e, 0xf2, 0xda, 0xc5, 0x6c, 0xf0, 0xfd,
  0xbc, 0x37, 0x7b, 0x17, 0xed, 0x6a, 0x85, 0x34, 0x8e, 0x46, 0x0b, 0xb3,
  0xf5, 0x78, 0x9c, 0xc8, 0x8f, 0x1a, 0x0a, 0x12, 0xd0, 0x38, 0x5f, 0xd2,
  0x49, 0x12, 0x52, 0x7d, 0x90, 0xc0, 0x73, 0x52, 0x99, 0x15, 0x9c, 0x31,
  0x8e, 0xfe, 0xe9, 0x2a, 0xe5, 0x4b, 0xcc, 0x1e, 0x75, 0x4f, 0xe7, 0x69,
  0x03, 0xe6, 0x84, 0x60, 0x73, 0x5f, 0xd2, 0x8d, 0x35, 0x9d, 0x83, 0x53,
  0x8d, 0x80, 0xd3, 0x89, 0x7c, 0x7a, 0x5a, 0xeb, 0xf5, 0x69, 0xde, 0x67,
  0xb9, 0x6c, 0x1c, 0x1a, 0x51, 0x1f, 0x8c, 0x89, 0x63, 0xd9, 0xb1, 0x31,
  0x94, 0xa3, 0x30, 0x20, 0xa5, 0xc1, 0x02, 0x81, 0x81, 0x00, 0xea, 0x9a,
  0x9d, 0x9c, 0x42, 0xfa, 0xc2, 0xa4, 0xec, 0x45, 0xc5, 0x8a, 0xc9, 0x97,
  0x8a, 0x28, 0x5f, 0x44, 0xda, 0x84, 0x05, 0xda, 0x29, 0x82, 0xdd, 0x9a,
  0x85, 0x81, 0xe1, 0xed, 0x07, 0x7f, 0x81, 0x59, 0x2f, 0xa3, 0xe7, 0xc3,
  0x12, 0x6e, 0xb2, 0x7b, 0xd7, 0xbc, 0x79, 0xde, 0x64, 0xfa, 0x84, 0xba,
  0xad, 0x70, 0x29, 0xb3, 0x6b, 0xe6, 0x47, 0x41, 0xe9, 0xfc, 0x57, 0x8c,
  0x4a, 0xd5, 0x34, 0x81, 0xfd, 0x34, 0x6d, 0x2a, 0x5b, 0xfc, 0x7b, 0x8a,
  0xeb, 0x52, 0x9b, 0x2b, 0x0d, 0xb6, 0x27, 0xe9, 0x68, 0x79, 0x3b, 0xce,
  0xb9, 0x2c, 0x41, 0x49, 0x26, 0x04, 0xae, 0x13, 0x93, 0x92, 0x5e, 0xaa,
  0x3c, 0x00, 0xb4, 0x00, 0x18, 0x4c, 0x24, 0xce, 0x4c, 0x08, 0xa3, 0xbc,
  0x1c, 0x85, 0xc4, 0x51, 0xaf, 0x9e, 0xfe, 0x41, 0xf3, 0x4b, 0x60, 0xf9,
  0x15, 0x14, 0xc2, 0x8e, 0xaa, 0x77, 0x02, 0x81, 0x81, 0x00, 0xcd, 0x49,
  0x7d, 0xfe, 0xfe, 0x73, 0x82, 0xf3, 0xc8, 0x33, 0x82, 0xa6, 0xea, 0x61,
  0xe7, 0xfc, 0x79, 0x66, 0x89, 0x8d, 0x5d, 0x72, 0xbb, 0x37, 0x1d, 0xee,
  0x15, 0xbe, 0x4f, 0x14, 0x6d, 0x4d, 0x53, 0x43, 0x5d, 0x03, 0x24, 0xc1,
  0xff, 0xf0, 0x3b, 0xb3, 0x29, 0xbf, 0x5a, 0x16, 0xa3, 0xbe, 0xa9, 0x3e,
  0xc2, 0x0f, 0xc6, 0x44, 0x6f, 0xab, 0x98, 0xe0, 0x2f, 0xc3, 0x19, 0xde,
  0x92, 0xe3, 0xee, 0x33, 0x7e, 0x47, 0x3b, 0x43, 0xd5, 0x23, 0x5a, 0x44,
  0xed, 0x0e, 0xda, 0x43, 0x18, 0xea, 0xf5, 0x66, 0xc5, 0x1c, 0x51, 0x4c,
  0xa8, 0x74, 0xd8, 0x10, 0xc9, 0x37, 0x3e, 0xd4, 0x9f, 0xfe, 0x30, 0x56,
  0xbf, 0x2c, 0x36, 0x31, 0x33, 0x8c, 0xdd, 0x48, 0xbd, 0x54, 0xd4, 0xc8,
  0xd2, 0x34, 0x0c, 0xf4, 0x98, 0xad, 0x5d, 0x44, 0xe9, 0x6d, 0x06, 0x05,
  0x4f, 0x9e, 0x9f, 0xe6, 0x25, 0x21, 0x02, 0x81, 0x80, 0x73, 0xd2, 0x5f,
  0x8b, 0x7c, 0xd9, 0xd5, 0xec, 0x9c, 0x25, 0x1a, 0x10, 0x99, 0xd3, 0xf1,
  0xc6, 0x5a, 0xba, 0x60, 0x73, 0x1b, 0x7c, 0x88, 0x4f, 0xee, 0x5d, 0xd2,
  0x19, 0xbc, 0x53, 0x4c, 0x07, 0x5b, 0xf1, 0x8e, 0xfe, 0x89, 0x76, 0x1a,
  0x0c, 0x82, 0x9b, 0x77, 0x77, 0xba, 0x66, 0xdc, 0x4d, 0x7d, 0xe7, 0xb7,
  0xa6, 0x8f, 0x3f, 0xe0, 0x3e, 0x30, 0xe1, 0xce, 0xc5, 0xe0, 0xe7, 0x07,
  0x2e, 0xd9, 0x1c, 0x6f, 0xc8, 0x49, 0x38, 0xc7, 0x6f, 0x10, 0x03, 0x16,
  0x88, 0x92, 0xc8, 0x9f, 0x9d, 0x55, 0x78, 0xfb, 0x36, 0x17, 0x1b, 0xc8,
  0xf9, 0x9b, 0x45, 0xa4, 0xba, 0x5c, 0xc2, 0x97, 0x71, 0x84, 0xc0, 0xe0,
  0x9c, 0xac, 0x40, 0xfb, 0xbd, 0xe3, 0xd1, 0xe1, 0x61, 0xc6, 0x8c, 0x21,
  0x3c, 0xbd, 0x1e, 0x62, 0xe8, 0xc8, 0xb8, 0x00, 0x88, 0x2f, 0x58, 0xe9,
  0x5a, 0x75, 0x6e, 0xff, 0xa3, 0x02, 0x81, 0x80, 0x59, 0xba, 0xf3, 0xed,
  0xcf, 0x7e, 0xe2, 0x10, 0x78, 0xc3, 0xbb, 0x2a, 0x06, 0x6d, 0x01, 0x1f,
  0xe4, 0x58, 0xa3, 0x6b, 0x3d, 0x1b, 0x77, 0x25, 0xa2, 0x59, 0x7c, 0xfb,
  0x90, 0x49, 0x57, 0x75, 0x63, 0x1d, 0xa0, 0xbc, 0x4d, 0x06, 0xd7, 0x3e,
  0x44, 0x7a, 0x0d, 0x97, 0x6c, 0x63, 0x54, 0xf3, 0x73, 0xba, 0xd0, 0xcc,
  0x60, 0x57, 0x6d, 0x90, 0x4d, 0xe4, 0x40, 0x3c, 0x41, 0x44, 0x7e, 0x64,
  0x4e, 0xac, 0x07, 0x58, 0x4f, 0x59, 0x59, 0x02, 0x78, 0xe4, 0x83, 0xd1,
  0xe8, 0x29, 0x47, 0xec, 0xfb, 0x93, 0x0e, 0x39, 0x50, 0x77, 0xf7, 0x72,
  0x0b, 0x37, 0x5b, 0x1c, 0x60, 0xc4, 0x43, 0xa2, 0xb1, 0xb2, 0x59, 0x21,
  0x94, 0x16, 0x71, 0x77, 0xf3, 0x09, 0x66, 0x68, 0x7c, 0x11, 0xc3, 0x7f,
  0xa8, 0xe2, 0x09, 0x12, 0x4e, 0x20, 0x5e, 0xff, 0x9e, 0x90, 0x17, 0xbb,
  0x38, 0x1d, 0x3a, 0xc1, 0x02, 0x81, 0x80, 0x4f, 0xb0, 0x59, 0xbb, 0xc1,
  0x75, 0xc0, 0x90, 0xbd, 0x17, 0x3e, 0x5f, 0xeb, 0x64, 0x3c, 0xf3, 0x14,
  0x4f, 0xb7, 0x4c, 0x77, 0xab, 0xa1, 0xed, 0xb4, 0xdc, 0x10, 0xf5, 0x19,
  0x1a, 0x83, 0x55, 0x0f, 0x78, 0x56, 0xf6, 0xd0, 0x0c, 0xa1, 0x8a, 0xcd,
  0xc8, 0x98, 0xea, 0x09, 0x9d, 0x03, 0xed, 0x3f, 0x7c, 0xcc, 0x01, 0x1e,
  0x57, 0x07, 0xcb, 0xb6, 0xfa, 0xd7, 0xf6, 0xc4, 0xd2, 0xcf, 0x49, 0xbb,
  0xb9, 0xb1, 0xa0, 0x12, 0xe8, 0xb6, 0x7b, 0x1d, 0xc9, 0x55, 0xd6, 0x74,
  0x18, 0x26, 0x71, 0x4c, 0x48, 0xa3, 0xbf, 0xbb, 0x44, 0x8c, 0x88, 0x68,
  0xc6, 0x41, 0x41, 0x81, 0x48, 0x71, 0x7f, 0x8e, 0x42, 0x33, 0x34, 0x72,
  0xfe, 0xea, 0xe3, 0x5c, 0x42, 0x29, 0x0a, 0x02, 0x94, 0x8c, 0x9a, 0xcd,
  0xed, 0x4a, 0x63, 0x5f, 0x92, 0x67, 0xda, 0x7f, 0xbe, 0xc7, 0x2a, 0x50,
  0x50, 0x86, 0x0c
};
unsigned int arduinoesp_3048_key_len = 1191;

unsigned char arduinoesp_3048_der[] = {
  0x30, 0x82, 0x03, 0x59, 0x30, 0x82, 0x02, 0x41, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x14, 0x6c, 0xeb, 0x0c, 0x56, 0x61, 0x04, 0x81, 0x51, 0x51,
  0x4c, 0xcf, 0x1f, 0x83, 0xa1, 0x1e, 0xae, 0x44, 0x38, 0xf1, 0xc0, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x30, 0x4d, 0x31, 0x4b, 0x30, 0x49, 0x06, 0x03, 0x55, 0x04,
  0x0b, 0x0c, 0x42, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x20, 0x57, 0x65,
  0x62, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x4f,
  0x3d, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
  0x49, 0x6e, 0x63, 0x2e, 0x20, 0x4c, 0x3d, 0x53, 0x65, 0x61, 0x74, 0x74,
  0x6c, 0x65, 0x20, 0x53, 0x54, 0x3d, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e,
  0x67, 0x74, 0x6f, 0x6e, 0x20, 0x43, 0x3d, 0x55, 0x53, 0x30, 0x1e, 0x17,
  0x0d, 0x32, 0x30, 0x30, 0x34, 0x32, 0x36, 0x32, 0x30, 0x32, 0x39, 0x31,
  0x34, 0x5a, 0x17, 0x0d, 0x34, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33,
  0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x1e, 0x31, 0x1c, 0x30, 0x1a, 0x06,
  0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x41, 0x57, 0x53, 0x20, 0x49, 0x6f,
  0x54, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
  0x65, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f,
  0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xbc, 0x21,
  0x29, 0xc4, 0x40, 0xbe, 0xd8, 0xf6, 0x3b, 0xfe, 0xbe, 0xdc, 0xe9, 0x9e,
  0x54, 0x76, 0xb8, 0x84, 0x53, 0xf4, 0xae, 0xb5, 0x32, 0x47, 0x7e, 0xfa,
  0x3a, 0x91, 0x55, 0x0e, 0x6b, 0xce, 0xcc, 0xa2, 0x46, 0x33, 0x08, 0xd7,
  0x4f, 0x30, 0xcf, 0xe5, 0xd3, 0x30, 0x0e, 0x61, 0x0a, 0x27, 0x6a, 0x5a,
  0x6c, 0xc7, 0x5c, 0xab, 0x72, 0x8d, 0x3e, 0xf5, 0x68, 0x9d, 0x21, 0xca,
  0x14, 0x37, 0xc0, 0x07, 0x0e, 0x66, 0x63, 0x7b, 0x38, 0x14, 0x93, 0xcb,
  0xd0, 0xb2, 0xff, 0x60, 0x5a, 0x79, 0x43, 0x0c, 0x0e, 0x1c, 0xc3, 0xc0,
  0x6c, 0xe8, 0xcf, 0xad, 0x72, 0x6e, 0xe1, 0x51, 0x0b, 0xb7, 0x83, 0x6f,
  0x8c, 0x95, 0x70, 0x5e, 0xa2, 0x65, 0x3a, 0x21, 0xe7, 0x62, 0x13, 0x48,
  0x4f, 0xeb, 0x50, 0xd7, 0xd8, 0x2a, 0x4e, 0xbe, 0x60, 0x9f, 0xe7, 0xd1,
  0x01, 0x65, 0x2e, 0xb9, 0xa4, 0xa9, 0x4a, 0x90, 0x27, 0x03, 0x26, 0xb7,
  0x37, 0x00, 0x36, 0x29, 0x2a, 0x21, 0x55, 0xfc, 0x75, 0x96, 0xd8, 0xcf,
  0xc3, 0xda, 0x44, 0xab, 0x17, 0xf3, 0xa8, 0x8f, 0xc5, 0xce, 0x22, 0x3e,
  0x57, 0x02, 0xd8, 0x4e, 0xcf, 0xeb, 0x6c, 0x7c, 0xb0, 0x7a, 0xe9, 0xf9,
  0xbd, 0x1f, 0xbc, 0x02, 0xf4, 0xcc, 0xf2, 0x6b, 0x1a, 0x25, 0x84, 0x38,
  0x4e, 0x06, 0x98, 0x6f, 0xdf, 0x5e, 0xee, 0x20, 0x92, 0x32, 0x20, 0x3b,
  0x14, 0x9e, 0xd0, 0x63, 0x65, 0x7b, 0x35, 0xb3, 0xd7, 0xda, 0xdb, 0xe5,
  0x54, 0x29, 0xea, 0x34, 0x95, 0x84, 0x14, 0x86, 0xa4, 0x10, 0xe9, 0x76,
  0xe1, 0xbf, 0xc1, 0xee, 0xea, 0x9f, 0x00, 0x3c, 0x96, 0xce, 0xde, 0x72,
  0x1a, 0x70, 0x4f, 0x26, 0x1e, 0xc3, 0x96, 0x75, 0x79, 0x87, 0xd0, 0xaf,
  0x65, 0x91, 0x85, 0x52, 0x88, 0xe9, 0x8e, 0xa0, 0x0e, 0x4a, 0xc2, 0xf1,
  0x2c, 0x57, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x60, 0x30, 0x5e, 0x30,
  0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
  0xe8, 0x5d, 0xfd, 0x2e, 0x7b, 0x75, 0x7e, 0x44, 0x6d, 0xb2, 0x48, 0x7c,
  0xd5, 0x50, 0x5f, 0x4d, 0x79, 0x25, 0x5a, 0xff, 0x30, 0x1d, 0x06, 0x03,
  0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x36, 0xb8, 0x87, 0x2f, 0x66,
  0xa5, 0x32, 0x33, 0xb3, 0x39, 0xda, 0xea, 0x77, 0x88, 0x40, 0xeb, 0x52,
  0xb7, 0x07, 0x89, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01,
  0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f,
  0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x0d, 0x06,
  0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
  0x03, 0x82, 0x01, 0x01, 0x00, 0x33, 0x4c, 0xb7, 0xe2, 0x13, 0xfe, 0x98,
  0xe3, 0xfb, 0x67, 0x90, 0xc7, 0x11, 0xd6, 0x55, 0xb1, 0xb4, 0xfb, 0x7f,
  0x9c, 0x3b, 0x8a, 0x7e, 0x58, 0x9c, 0x77, 0xc3, 0x00, 0x44, 0x2c, 0xaa,
  0x7e, 0xdf, 0xb5, 0xc6, 0xb2, 0x54, 0xfd, 0xca, 0x17, 0x75, 0xba, 0x44,
  0x8b, 0xbc, 0xc7, 0xbc, 0x96, 0xbf, 0x23, 0xba, 0x6c, 0xb6, 0x74, 0x4e,
  0x8e, 0xff, 0x06, 0xb1, 0x9b, 0x28, 0x20, 0x4b, 0x9e, 0x49, 0xa9, 0xb6,
  0xc7, 0x8a, 0x40, 0xf2, 0x71, 0xf1, 0xb4, 0x69, 0xb0, 0xa1, 0xed, 0x5e,
  0x21, 0x67, 0xd4, 0xcb, 0xf5, 0x76, 0xcd, 0x30, 0xc8, 0x31, 0xee, 0x38,
  0x50, 0x51, 0xdb, 0x67, 0xc3, 0x7d, 0x6e, 0x56, 0x2d, 0x9a, 0x16, 0xa8,
  0x7f, 0x25, 0x88, 0x40, 0xe0, 0xd6, 0x48, 0xf2, 0xcc, 0xc2, 0xee, 0x9b,
  0xd1, 0x8c, 0x7e, 0xb6, 0x65, 0x22, 0x5e, 0x7d, 0x54, 0x2d, 0x10, 0x5a,
  0x88, 0xe6, 0xaa, 0xae, 0x30, 0x84, 0xb1, 0xc0, 0x1a, 0x3d, 0xce, 0x6a,
  0x5f, 0xdd, 0x26, 0x82, 0xc3, 0xb2, 0x5c, 0xce, 0xaa, 0x9d, 0x39, 0xa2,
  0x46, 0x83, 0x3f, 0xd1, 0xda, 0x0f, 0xff, 0xce, 0x12, 0x05, 0xf9, 0x84,
  0x74, 0x64, 0x9f, 0x57, 0xcd, 0x73, 0x9b, 0x70, 0x11, 0xf8, 0xb6, 0x74,
  0xd5, 0xd2, 0x23, 0x85, 0xd8, 0x96, 0x1e, 0x95, 0x21, 0x06, 0x98, 0xf8,
  0xc8, 0x96, 0xf2, 0x86, 0xd7, 0xb5, 0x52, 0xe6, 0x34, 0x2b, 0xaa, 0xed,
  0x47, 0xeb, 0xc7, 0xdd, 0xa2, 0x0b, 0xaf, 0x44, 0x1b, 0xa0, 0xce, 0x61,
  0x69, 0xda, 0xe3, 0x2c, 0x5f, 0x61, 0x4f, 0xd2, 0x76, 0xc0, 0xdb, 0xbb,
  0x26, 0x91, 0x60, 0x7e, 0x33, 0xe8, 0x25, 0xa4, 0xeb, 0x79, 0x44, 0xad,
  0xa7, 0x79, 0xda, 0x0b, 0x28, 0xc9, 0x51, 0xbb, 0xc6, 0x08, 0xb4, 0x81,
  0xb1, 0x54, 0x42, 0x6f, 0x34, 0xa9, 0xea, 0x65, 0x4a
};
unsigned int arduinoesp_3048_der_len = 861;

unsigned char aws_root_ca_der[] = {
  0x30, 0x82, 0x03, 0x41, 0x30, 0x82, 0x02, 0x29, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x13, 0x06, 0x6c, 0x9f, 0xcf, 0x99, 0xbf, 0x8c, 0x0a, 0x39,
  0xe2, 0xf0, 0x78, 0x8a, 0x43, 0xe6, 0x96, 0x36, 0x5b, 0xca, 0x30, 0x0d,
  0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
  0x00, 0x30, 0x39, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
  0x13, 0x02, 0x55, 0x53, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04,
  0x0a, 0x13, 0x06, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x31, 0x19, 0x30,
  0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x10, 0x41, 0x6d, 0x61, 0x7a,
  0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x20, 0x31,
  0x30, 0x1e, 0x17, 0x0d, 0x31, 0x35, 0x30, 0x35, 0x32, 0x36, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x33, 0x38, 0x30, 0x31, 0x31,
  0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x39, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
  0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x06, 0x41, 0x6d,
  0x61, 0x7a, 0x6f, 0x6e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04,
  0x03, 0x13, 0x10, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x20, 0x52, 0x6f,
  0x6f, 0x74, 0x20, 0x43, 0x41, 0x20, 0x31, 0x30, 0x82, 0x01, 0x22, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02,
  0x82, 0x01, 0x01, 0x00, 0xb2, 0x78, 0x80, 0x71, 0xca, 0x78, 0xd5, 0xe3,
  0x71, 0xaf, 0x47, 0x80, 0x50, 0x74, 0x7d, 0x6e, 0xd8, 0xd7, 0x88, 0x76,
  0xf4, 0x99, 0x68, 0xf7, 0x58, 0x21, 0x60, 0xf9, 0x74, 0x84, 0x01, 0x2f,
  0xac, 0x02, 0x2d, 0x86, 0xd3, 0xa0, 0x43, 0x7a, 0x4e, 0xb2, 0xa4, 0xd0,
  0x36, 0xba, 0x01, 0xbe, 0x8d, 0xdb, 0x48, 0xc8, 0x07, 0x17, 0x36, 0x4c,
  0xf4, 0xee, 0x88, 0x23, 0xc7, 0x3e, 0xeb, 0x37, 0xf5, 0xb5, 0x19, 0xf8,
  0x49, 0x68, 0xb0, 0xde, 0xd7, 0xb9, 0x76, 0x38, 0x1d, 0x61, 0x9e, 0xa4,
  0xfe, 0x82, 0x36, 0xa5, 0xe5, 0x4a, 0x56, 0xe4, 0x45, 0xe1, 0xf9, 0xfd,
  0xb4, 0x16, 0xfa, 0x74, 0xda, 0x9c, 0x9b, 0x35, 0x39, 0x2f, 0xfa, 0xb0,
  0x20, 0x50, 0x06, 0x6c, 0x7a, 0xd0, 0x80, 0xb2, 0xa6, 0xf9, 0xaf, 0xec,
  0x47, 0x19, 0x8f, 0x50, 0x38, 0x07, 0xdc, 0xa2, 0x87, 0x39, 0x58, 0xf8,
  0xba, 0xd5, 0xa9, 0xf9, 0x48, 0x67, 0x30, 0x96, 0xee, 0x94, 0x78, 0x5e,
  0x6f, 0x89, 0xa3, 0x51, 0xc0, 0x30, 0x86, 0x66, 0xa1, 0x45, 0x66, 0xba,
  0x54, 0xeb, 0xa3, 0xc3, 0x91, 0xf9, 0x48, 0xdc, 0xff, 0xd1, 0xe8, 0x30,
  0x2d, 0x7d, 0x2d, 0x74, 0x70, 0x35, 0xd7, 0x88, 0x24, 0xf7, 0x9e, 0xc4,
  0x59, 0x6e, 0xbb, 0x73, 0x87, 0x17, 0xf2, 0x32, 0x46, 0x28, 0xb8, 0x43,
  0xfa, 0xb7, 0x1d, 0xaa, 0xca, 0xb4, 0xf2, 0x9f, 0x24, 0x0e, 0x2d, 0x4b,
  0xf7, 0x71, 0x5c, 0x5e, 0x69, 0xff, 0xea, 0x95, 0x02, 0xcb, 0x38, 0x8a,
  0xae, 0x50, 0x38, 0x6f, 0xdb, 0xfb, 0x2d, 0x62, 0x1b, 0xc5, 0xc7, 0x1e,
  0x54, 0xe1, 0x77, 0xe0, 0x67, 0xc8, 0x0f, 0x9c, 0x87, 0x23, 0xd6, 0x3f,
  0x40, 0x20, 0x7f, 0x20, 0x80, 0xc4, 0x80, 0x4c, 0x3e, 0x3b, 0x24, 0x26,
  0x8e, 0x04, 0xae, 0x6c, 0x9a, 0xc8, 0xaa, 0x0d, 0x02, 0x03, 0x01, 0x00,
  0x01, 0xa3, 0x42, 0x30, 0x40, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,
  0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e,
  0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02,
  0x01, 0x86, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
  0x14, 0x84, 0x18, 0xcc, 0x85, 0x34, 0xec, 0xbc, 0x0c, 0x94, 0x94, 0x2e,
  0x08, 0x59, 0x9c, 0xc7, 0xb2, 0x10, 0x4e, 0x0a, 0x08, 0x30, 0x0d, 0x06,
  0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
  0x03, 0x82, 0x01, 0x01, 0x00, 0x98, 0xf2, 0x37, 0x5a, 0x41, 0x90, 0xa1,
  0x1a, 0xc5, 0x76, 0x51, 0x28, 0x20, 0x36, 0x23, 0x0e, 0xae, 0xe6, 0x28,
  0xbb, 0xaa, 0xf8, 0x94, 0xae, 0x48, 0xa4, 0x30, 0x7f, 0x1b, 0xfc, 0x24,
  0x8d, 0x4b, 0xb4, 0xc8, 0xa1, 0x97, 0xf6, 0xb6, 0xf1, 0x7a, 0x70, 0xc8,
  0x53, 0x93, 0xcc, 0x08, 0x28, 0xe3, 0x98, 0x25, 0xcf, 0x23, 0xa4, 0xf9,
  0xde, 0x21, 0xd3, 0x7c, 0x85, 0x09, 0xad, 0x4e, 0x9a, 0x75, 0x3a, 0xc2,
  0x0b, 0x6a, 0x89, 0x78, 0x76, 0x44, 0x47, 0x18, 0x65, 0x6c, 0x8d, 0x41,
  0x8e, 0x3b, 0x7f, 0x9a, 0xcb, 0xf4, 0xb5, 0xa7, 0x50, 0xd7, 0x05, 0x2c,
  0x37, 0xe8, 0x03, 0x4b, 0xad, 0xe9, 0x61, 0xa0, 0x02, 0x6e, 0xf5, 0xf2,
  0xf0, 0xc5, 0xb2, 0xed, 0x5b, 0xb7, 0xdc, 0xfa, 0x94, 0x5c, 0x77, 0x9e,
  0x13, 0xa5, 0x7f, 0x52, 0xad, 0x95, 0xf2, 0xf8, 0x93, 0x3b, 0xde, 0x8b,
  0x5c, 0x5b, 0xca, 0x5a, 0x52, 0x5b, 0x60, 0xaf, 0x14, 0xf7, 0x4b, 0xef,
  0xa3, 0xfb, 0x9f, 0x40, 0x95, 0x6d, 0x31, 0x54, 0xfc, 0x42, 0xd3, 0xc7,
  0x46, 0x1f, 0x23, 0xad, 0xd9, 0x0f, 0x48, 0x70, 0x9a, 0xd9, 0x75, 0x78,
  0x71, 0xd1, 0x72, 0x43, 0x34, 0x75, 0x6e, 0x57, 0x59, 0xc2, 0x02, 0x5c,
  0x26, 0x60, 0x29, 0xcf, 0x23, 0x19, 0x16, 0x8e, 0x88, 0x43, 0xa5, 0xd4,
  0xe4, 0xcb, 0x08, 0xfb, 0x23, 0x11, 0x43, 0xe8, 0x43, 0x29, 0x72, 0x62,
  0xa1, 0xa9, 0x5d, 0x5e, 0x08, 0xd4, 0x90, 0xae, 0xb8, 0xd8, 0xce, 0x14,
  0xc2, 0xd0, 0x55, 0xf2, 0x86, 0xf6, 0xc4, 0x93, 0x43, 0x77, 0x66, 0x61,
  0xc0, 0xb9, 0xe8, 0x41, 0xd7, 0x97, 0x78, 0x60, 0x03, 0x6e, 0x4a, 0x72,
  0xae, 0xa5, 0xd1, 0x7d, 0xba, 0x10, 0x9e, 0x86, 0x6c, 0x1b, 0x8a, 0xb9,
  0x59, 0x33, 0xf8, 0xeb, 0xc4, 0x90, 0xbe, 0xf1, 0xb9
};
unsigned int aws_root_ca_der_len = 837;


// //////////////////////////////////////////////////////     CONSTANTS   //////////////////////////////////////////////////////

const char* AWS_endpoint = "a3ndp1z76itiwu-ats.iot.us-east-1.amazonaws.com"; //MQTT broker ip
const char* ssid = "Wifi@Home";
const char* password = "33056630";
// const int Pin_LightSensor = A0;  // Pin Light Sensor
// const int Pin_SensorMoisture  = D3;  // Pin Moisture Sensor
const int Pin_Led_StatusAlert  = BUILTIN_LED;

const int Pin_ReadAnalogSensor = A0;  // Pin Light Sensor
const int Pin_SensorMoisture_ON  = D5;  // Pin Moisture Sensor
const int Pin_LightSensor_ON = D6;  // Pin Light Sensor


// //////////////////////////////////////////////////////     VARIABLES   ////////////////////////////////////////////////////// 
// Sensors
int iReadAnalogSensor = 0;
int iSensorMoisture = 0;
int iSensor_Light = 0;

// Variables
int iPeriod = 60000;  //Time period for production
// int iPeriod = 3000; //Debug Time for test

float fVersion = 2.2;
String ThingID = "";
unsigned long lNow = 0;

// Objetos WIFI y NTPClient   ---------------------------------------------------------------------
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org",  -3*3600); // Timezone -3 Buenos Aires

WiFiClientSecure espClient;
RtcDS3231<TwoWire> Rtc(Wire);


// //////////////////////////////////////////////////////     FUNCTIONS   //////////////////////////////////////////////////////

int ReadAnalogSensor(int iSensor_Port) {
  iReadAnalogSensor = 0;
/*  digitalWrite(Pin_SensorMoisture_ON, LOW); // OFF Pin Sensor
  digitalWrite(Pin_LightSensor_ON, LOW); // OFF Pin Sensor
    Serial.println("...............................................");
      Serial.print("Analog Read Port  xxx LOW  xxx "); Serial.println(iSensor_Port);
        digitalWrite(iSensor_Port, LOW); // OFF Pin Sensor
         delay(100);
         iReadAnalogSensor = analogRead(Pin_ReadAnalogSensor);
        Serial.print("Analog Read Data:"); Serial.println(iReadAnalogSensor);
  Serial.println("...............................................");
     Serial.print("Analog Read Port ---- HIGH ---:"); Serial.println(iSensor_Port);
*/
        digitalWrite(iSensor_Port, HIGH); // OFF Sensor
         delay(100);
         iReadAnalogSensor = analogRead(Pin_ReadAnalogSensor);
        digitalWrite(iSensor_Port, LOW); // OFF Sensor
//        Serial.print("Analog Read Data:"); Serial.println(iReadAnalogSensor);
//  Serial.println("...............................................");
   return iReadAnalogSensor;
}


void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++)
    Serial.print((char)payload[i]);

// Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(Pin_Led_StatusAlert, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(Pin_Led_StatusAlert, HIGH);  // Turn the LED off by making the voltage HIGH
  }
  Serial.println();
}

PubSubClient client(AWS_endpoint, 8883, callback, espClient); //set  MQTT port number to 8883
long lastMsg = 0;
char msg[MSG_BUFFER_SIZE];
int value = 0;

void reconnect() {
  // Loop until we're reconnected
       while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
 //   Create a random client ID
    String clientId = "ESP8266Client-id-";
    clientId += String(random(0xffff), HEX);

    Serial.print("Client ID: ");
    Serial.println(clientId);
    ThingID = clientId;

    // Attempt to connect
   if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.subscribe("iot/device/esp8266/in");
      Serial.println("Suscribe in Topic: iot/device/esp8266/in");


    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
   }
  }
}


// //////////////////////////////////////////////////////     SETUP   //////////////////////////////////////////////////////
void setup() {
  pinMode(Pin_Led_StatusAlert, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  pinMode(Pin_ReadAnalogSensor, INPUT);
  
  pinMode(Pin_SensorMoisture_ON, OUTPUT); // Initialize the Moisture Sensor as an Input
  pinMode(Pin_LightSensor_ON, OUTPUT); // Initialize the Moisture Sensor as an Input

  digitalWrite(Pin_SensorMoisture_ON, LOW); // OFF Pin Sensor
  digitalWrite(Pin_LightSensor_ON, LOW); // OFF Pin Sensor
  
  Serial.begin (115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  espClient.setCertificate(arduinoesp_3048_der, arduinoesp_3048_der_len);
  espClient.setPrivateKey(arduinoesp_3048_key, arduinoesp_3048_key_len);
  espClient.setCACert(aws_root_ca_der, aws_root_ca_der_len);

  timeClient.begin();
   while(!timeClient.update()){
     timeClient.forceUpdate();
   }
  espClient.setX509Time(timeClient.getEpochTime());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: "); Serial.println(WiFi.localIP());

  Rtc.Begin();
  Rtc.SetDateTime(timeClient.getEpochTime()-946684800UL);  // Do udp NTP lookup, epoch time is unix time - subtract the 30 extra yrs (946684800UL) library expects 2000
  Rtc.Enable32kHzPin(false);
  Rtc.SetSquareWavePin(DS3231SquareWavePin_ModeNone);
  RtcDateTime now = Rtc.GetDateTime();

  Serial.print(" Tiempo de NTP:"); Serial.println(timeClient.getEpochTime());
  Serial.print(" Tiempo de Clock DS3231:");
  Serial.println(now);
  
  String hora = (String)now.Hour()+":"+(String)now.Minute()+":"+(String)now.Second();
  String dia = (String)now.Year()+"/"+(String)now.Month()+"/"+(String)now.Day();
  Serial.print(dia); Serial.println(hora);
 
  iSensor_Light = ReadAnalogSensor(Pin_LightSensor_ON); // print the sensor reading so you know its range
  Serial.print("Sensor de luz:");Serial.println(iSensor_Light);
  
  iSensorMoisture = ReadAnalogSensor(Pin_SensorMoisture_ON);
  Serial.print("Moisure Sensor: :");Serial.println(iSensorMoisture);
  Serial.println("-----------------------------------------------------------------------------------------------------------");
}



// //////////////////////////////////////////////////////     LOOP   //////////////////////////////////////////////////////
void loop() {
   if (!client.connected()) {
      reconnect();
    }
    client.loop(); // process incoming messages and maintain its connection to the server.
    
   lNow = millis();
  if (lNow - lastMsg > iPeriod) {
    lastMsg = lNow;
    ++value;
// Get Version
     Serial.print("Version :");Serial.println(fVersion);
     Serial.print("Buffer Size:");Serial.println(MSG_BUFFER_SIZE);
// Get day and time from RS3231
      RtcDateTime now = Rtc.GetDateTime();
      String dia = (String)now.Year()+"/"+(String)now.Month()+"/"+(String)now.Day();
      String hora = (String)now.Hour()+":"+(String)now.Minute()+":"+(String)now.Second();
      Serial.print("Time: "); Serial.print(dia);Serial.print(" , "); Serial.println(hora);
// Get temperature from RtcDS3231
      RtcTemperature  temp = Rtc.GetTemperature();
      Serial.print("Temperature:"); Serial.println(temp.AsFloatDegC());
      float temperatura = temp.AsFloatDegC();
// Get light sensor from Analog Light Sensor 593438
      iSensor_Light = ReadAnalogSensor(Pin_LightSensor_ON );
      Serial.print("Light Sensor :");Serial.println(iSensor_Light);

// Prints the condition of soil.  Dry, Wet or Perfect
      iSensorMoisture = ReadAnalogSensor(Pin_SensorMoisture_ON );
 /*   if (iSensorMoisture >= 1000) (Serial.print("Moisure Sensor: (soil too dry): "));
     else if ((iSensorMoisture <= 999) && (iSensorMoisture >=901)) (Serial.print("Moisure Sensor: (soil too dry): "));
     else if (iSensorMoisture <= 900) (Serial.print("Moisure Sensor: (soil is wet) :"));
    else;
 */   
    Serial.print("Moisture Sensor :");
    Serial.println(iSensorMoisture);

// Created Json data to publish 
  StaticJsonDocument<MSG_BUFFER_SIZE> JSONMessage;
    JSONMessage["@timestamp"] = timeClient.getEpochTime();
    JSONMessage["thing"] = ThingID;
    JSONMessage["sensor"] = "DS3231";
    JSONMessage["trx"] = value;
    JSONMessage["date"] = dia;
    JSONMessage["time"] = hora;
    JSONMessage["temperature"] = temperatura;
    JSONMessage["light"] = iSensor_Light;
    JSONMessage["moisture"] = iSensorMoisture;
    JSONMessage["version"] = fVersion;

    char json_string[MSG_BUFFER_SIZE];
    serializeJson(JSONMessage, json_string);

    snprintf (msg, MSG_BUFFER_SIZE, json_string );
    Serial.println("Publish message in Topic: iot/device/esp8266/out ");
    Serial.println(msg);
    client.publish("iot/device/esp8266/out" , msg);
    Serial.print("Heap: "); Serial.println(ESP.getFreeHeap()); //Low heap can cause problems
    Serial.println("--------------------------------------------------------------------------------");
  }
}
